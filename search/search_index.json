{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview \u00b6 This library allows you to automatically generate API gateway requests based on your implemented microservices. Installation \u00b6 To install fastapi-gateway-auto-generate : pip install git+https://github.com/xitowzys-ISZF/FastAPI-auto-generate-gateway.git","title":"Home"},{"location":"#overview","text":"This library allows you to automatically generate API gateway requests based on your implemented microservices.","title":"Overview"},{"location":"#installation","text":"To install fastapi-gateway-auto-generate : pip install git+https://github.com/xitowzys-ISZF/FastAPI-auto-generate-gateway.git","title":"Installation"},{"location":"FAQ/","text":"FAQ \u00b6 Where is the service data stored? \u00b6 Data and service status are stored in a local SQLite database. If you want to store the database side by side, you can specify an additional parameter database_path","title":"FAQ"},{"location":"FAQ/#faq","text":"","title":"FAQ"},{"location":"FAQ/#where-is-the-service-data-stored","text":"Data and service status are stored in a local SQLite database. If you want to store the database side by side, you can specify an additional parameter database_path","title":"Where is the service data stored?"},{"location":"CodeReference/","text":"fastapi_gateway_auto_generate.Generator \u00b6 Generator ( config ) \u00b6 The class responsible for adding automatic service connections to the FastAPI object. Parameters: Name Type Description Default config Config The Config object with its configuration. required Source code in fastapi_gateway_auto_generate/Generator.py 13 14 15 16 17 18 19 20 21 22 def __init__ ( self , config : Config ) -> None : self . __config = config if not os . path . isfile ( self . __config . db_path ): InitDatabaseUsecase () . execute ( db_url = config . db_url ) if self . __config . service_management : self . __init_management_urls () self . build () __init_management_urls () \u00b6 Service management initialization. Source code in fastapi_gateway_auto_generate/Generator.py 24 25 26 27 def __init_management_urls ( self ): \"\"\"Service management initialization. \"\"\" Management ( config = self . __config ) build () \u00b6 Adding services to the FastAPI object. Source code in fastapi_gateway_auto_generate/Generator.py 29 30 31 32 33 34 35 36 37 38 39 40 def build ( self ) -> None : \"\"\"Adding services to the FastAPI object. \"\"\" services_result = BuildRouteModelsUsecase () . execute ( config = self . __config ) BuildRoutesUsecase () . execute ( services_result = services_result , fast_api_app = self . __config . fast_api_app ) fastapi_gateway_auto_generate.Config \u00b6 Config ( fast_api_app , service_management = True , db_path = './database.db' , jwt = None , allow_large_files = False , broker_url = '' ) \u00b6 The Configuration class is intended for configuring the auto-generation of services for the API Gateway. Parameters: Name Type Description Default fast_api_app FastAPI Pointer to your FastAPI application. required service_management bool Enable the built-in service manager. True db_path str The path to the SQLite database. './database.db' jwt Optional [ Type [ T ]] The class responsible for protecting the routers. None celery_app Optional [ Celery ] The Celery object responsible for transferring large files. required Source code in fastapi_gateway_auto_generate/Config.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 def __init__ ( self , fast_api_app : FastAPI , service_management : bool = True , db_path : str = \"./database.db\" , jwt : Optional [ Type [ T ]] = None , allow_large_files : bool = False , broker_url : str = \"\" ) -> None : self . fast_api_app : FastAPI = fast_api_app self . service_management : bool = service_management self . jwt = jwt self . service_name = \"API-Gateway\" if db_path != \"./database.db\" : self . db_path = db_path else : self . db_path = \"./database.db\" # self.db_path = \"./database.db\" if db_path is None else db_path self . db_url = f \"sqlite:/// { os . path . abspath ( self . db_path ) } \" # try: # if not (allow_large_files and broker_url): # raise ConfigException(\"Broker URL was not specified\") # except Exception as e: # RichTraceback().console_call_exception() self . allow_large_files : bool = allow_large_files","title":"Main"},{"location":"CodeReference/#fastapi_gateway_auto_generate.Generator","text":"","title":"Generator"},{"location":"CodeReference/#fastapi_gateway_auto_generate.Generator.Generator","text":"The class responsible for adding automatic service connections to the FastAPI object. Parameters: Name Type Description Default config Config The Config object with its configuration. required Source code in fastapi_gateway_auto_generate/Generator.py 13 14 15 16 17 18 19 20 21 22 def __init__ ( self , config : Config ) -> None : self . __config = config if not os . path . isfile ( self . __config . db_path ): InitDatabaseUsecase () . execute ( db_url = config . db_url ) if self . __config . service_management : self . __init_management_urls () self . build ()","title":"Generator"},{"location":"CodeReference/#fastapi_gateway_auto_generate.Generator.Generator.__init_management_urls","text":"Service management initialization. Source code in fastapi_gateway_auto_generate/Generator.py 24 25 26 27 def __init_management_urls ( self ): \"\"\"Service management initialization. \"\"\" Management ( config = self . __config )","title":"__init_management_urls()"},{"location":"CodeReference/#fastapi_gateway_auto_generate.Generator.Generator.build","text":"Adding services to the FastAPI object. Source code in fastapi_gateway_auto_generate/Generator.py 29 30 31 32 33 34 35 36 37 38 39 40 def build ( self ) -> None : \"\"\"Adding services to the FastAPI object. \"\"\" services_result = BuildRouteModelsUsecase () . execute ( config = self . __config ) BuildRoutesUsecase () . execute ( services_result = services_result , fast_api_app = self . __config . fast_api_app )","title":"build()"},{"location":"CodeReference/#fastapi_gateway_auto_generate.Config","text":"","title":"Config"},{"location":"CodeReference/#fastapi_gateway_auto_generate.Config.Config","text":"The Configuration class is intended for configuring the auto-generation of services for the API Gateway. Parameters: Name Type Description Default fast_api_app FastAPI Pointer to your FastAPI application. required service_management bool Enable the built-in service manager. True db_path str The path to the SQLite database. './database.db' jwt Optional [ Type [ T ]] The class responsible for protecting the routers. None celery_app Optional [ Celery ] The Celery object responsible for transferring large files. required Source code in fastapi_gateway_auto_generate/Config.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 def __init__ ( self , fast_api_app : FastAPI , service_management : bool = True , db_path : str = \"./database.db\" , jwt : Optional [ Type [ T ]] = None , allow_large_files : bool = False , broker_url : str = \"\" ) -> None : self . fast_api_app : FastAPI = fast_api_app self . service_management : bool = service_management self . jwt = jwt self . service_name = \"API-Gateway\" if db_path != \"./database.db\" : self . db_path = db_path else : self . db_path = \"./database.db\" # self.db_path = \"./database.db\" if db_path is None else db_path self . db_url = f \"sqlite:/// { os . path . abspath ( self . db_path ) } \" # try: # if not (allow_large_files and broker_url): # raise ConfigException(\"Broker URL was not specified\") # except Exception as e: # RichTraceback().console_call_exception() self . allow_large_files : bool = allow_large_files","title":"Config"},{"location":"CodeReference/database/","text":"","title":"Database"},{"location":"CodeReference/migration/","text":"","title":"Migration"},{"location":"CodeReference/domain/models/RouteModel/","text":"fastapi_gateway_auto_generate.domain.models.RouteModel.RouteModel dataclass \u00b6 A data class for storing data about a microservice. Parameters: Name Type Description Default request_method Any Is a callable (like app.get, app.post and so on.) required gateway_path str Is the path to bind gateway. required service_url str Is url path to microservice (like \" https://api.example.com/v1 \") required service_path str The path to the endpoint on another service. required query_params Optional [ List [ str ]] Used to extract query parameters from endpoint and transmission to microservice None query_required Optional [ List [ bool ]] Defines whether the specified parameters are mandatory for the request to the microservice. None query_is_cookie Optional [ List [ bool ]] Determines whether the specified parameters should be passed as a cookie. None form_params Optional [ List [ str ]] Used to extract form model parameters from endpoint and transmission to microservice None body_params Optional [ List [ str ]] Used to extract body model from endpoint and transmission to microservice None tags Optional [ List [ str ]] Allows grouped objects in the api docs None dependencies Optional [ str ] See documentation for details - https://fastapi.tiangolo.com/tutorial/dependencies/#declare-the-dependency-in-the-dependant (None)","title":"RouteModel"},{"location":"CodeReference/domain/models/RouteModel/#fastapi_gateway_auto_generate.domain.models.RouteModel.RouteModel","text":"A data class for storing data about a microservice. Parameters: Name Type Description Default request_method Any Is a callable (like app.get, app.post and so on.) required gateway_path str Is the path to bind gateway. required service_url str Is url path to microservice (like \" https://api.example.com/v1 \") required service_path str The path to the endpoint on another service. required query_params Optional [ List [ str ]] Used to extract query parameters from endpoint and transmission to microservice None query_required Optional [ List [ bool ]] Defines whether the specified parameters are mandatory for the request to the microservice. None query_is_cookie Optional [ List [ bool ]] Determines whether the specified parameters should be passed as a cookie. None form_params Optional [ List [ str ]] Used to extract form model parameters from endpoint and transmission to microservice None body_params Optional [ List [ str ]] Used to extract body model from endpoint and transmission to microservice None tags Optional [ List [ str ]] Allows grouped objects in the api docs None dependencies Optional [ str ] See documentation for details - https://fastapi.tiangolo.com/tutorial/dependencies/#declare-the-dependency-in-the-dependant (None)","title":"RouteModel"},{"location":"CodeReference/domain/usecases/BuildRouteModelsUsecase/","text":"fastapi_gateway_auto_generate . domain . usecases . BuildRouteModelsUsecase . BuildRouteModelsUsecase () \u00b6 The use case is responsible for creating an instance of the 'RouteModel' model and Pydantic models. Source code in fastapi_gateway_auto_generate/domain/usecases/BuildRouteModelsUsecase.py 23 24 def __init__ ( self ) -> None : self . __open_api_parser : OpenApiParser = OpenApiParser () __generate_models () \u00b6 Pydantic model generator from openapi.json.\" Returns: Name Type Description _uuid str Unique identifier as the file name. classes list [ str ] List of class names. Source code in fastapi_gateway_auto_generate/domain/usecases/BuildRouteModelsUsecase.py 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 def __generate_models ( self ): \"\"\"Pydantic model generator from openapi.json.\" Returns: _uuid (str): Unique identifier as the file name. classes (list[str]): List of class names. \"\"\" shortuuid . set_alphabet ( \"ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\" ) project_root = os . path . dirname ( sys . modules [ 'fastapi_gateway_auto_generate' ] . __file__ ) letters = string . ascii_lowercase _uuid = f \"model_ { shortuuid . ShortUUID () . random ( length = 10 ) } \" output = Path ( f ' { project_root } /tmp/models/ { _uuid } .py' ) dir = Path ( f ' { project_root } /tmp/models/' ) generate ( input_ = self . __open_api_parser . get_raw_resoponse_in_string (), input_file_type = InputFileType . OpenAPI , input_filename = \"example.json\" , output = output ) model : str = output . read_text () classes : list [ str ] = re . findall ( r \"class\\s([A-Za-z0-91]*)\" , model ) return _uuid , classes execute ( config ) \u00b6 The class responsible for adding automatic service connections to the FastAPI object. Parameters: Name Type Description Default config Config The Config object with its configuration. required Returns: Name Type Description services_result list [ dict [ str , Any ]] The product of a and b . Source code in fastapi_gateway_auto_generate/domain/usecases/BuildRouteModelsUsecase.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 def execute ( self , config : Config ) -> list [ dict [ str , Any ]]: \"\"\"The class responsible for adding automatic service connections to the FastAPI object. Args: config (Config): The Config object with its configuration. Returns: services_result (list[dict[str, Any]]): The product of `a` and `b`. \"\"\" routes_model : list [ RouteModel ] = [] services_result : list [ dict [ str , Any ]] = [] get_all_info_services_model : GetAllInfoServices = GetAllInfoServices ( page = 1 ) services , err = GetAllServices ( db_url = config . db_url ) . get_all_services ( get_all_info_services_model = get_all_info_services_model ) if not err is None : return services_result count_page : int = services [ \"metadata\" ][ \"count_page\" ] StatusService ( db_url = config . db_url ) . delete_all_rows () UrlService ( db_url = config . db_url ) . delete_all_rows () if err is None : for _ in range ( 0 , count_page ): services , err = GetAllServices ( db_url = config . db_url ) . get_all_services ( get_all_info_services_model = get_all_info_services_model ) for service in services [ \"services\" ]: routes_model = [] service_result = {} url = f \" { service [ 'domain' ] } : { service [ 'port' ] } \" logger . debug ( url ) status_code = self . __open_api_parser . parse_from_service ( url = url ) logger . debug ( status_code ) StatusService ( db_url = config . db_url ) . set_status_service ( id_service = service [ \"id\" ], status_code = status_code ) if status_code != 200 : continue for path in self . __open_api_parser . get_paths (): if self . __open_api_parser . auto_generate_enabled ( path = path ): UrlService ( db_url = config . db_url ) . set_url_service ( id_service = service [ \"id\" ], url = path ) path_method : str = self . __open_api_parser . get_path_method ( path ) dependencies = [] logger . debug ( self . __open_api_parser . get_paths ()) if not ( config . jwt is None ) and self . __open_api_parser . check_enable_auth_in_api_gateway ( path = path ): dependencies . append ( Depends ( config . jwt ( service [ \"name\" ], path , path_method ))) route_model : RouteModel = RouteModel ( request_method = getattr ( config . fast_api_app , path_method ), gateway_path = f \"/ { service [ 'name' ] }{ path } \" , service_url = url , service_path = path , tags = [ service [ \"name\" ]], dependencies = dependencies ) route_model . query_params , route_model . query_required , route_model . query_is_cookie = self . __open_api_parser . get_queries_param ( path = path , method = path_method ) route_model . form_params = self . __open_api_parser . get_body_multipart_form_data ( path = path , method = path_method ) route_model . body_params = self . __open_api_parser . get_body_application_json ( path = path , method = path_method ) routes_model . append ( route_model ) else : continue service_result [ \"models\" ], service_result [ \"model_output\" ] = self . __generate_models ( ) service_result [ \"route_models\" ] = routes_model service_result [ \"service_url\" ] = f \" { service [ 'domain' ] } : { service [ 'port' ] } \" services_result . append ( service_result ) get_all_info_services_model . page += 1 pprint ( services_result ) return services_result","title":"BuildRouteModelsUsecase"},{"location":"CodeReference/domain/usecases/BuildRouteModelsUsecase/#fastapi_gateway_auto_generate.domain.usecases.BuildRouteModelsUsecase.BuildRouteModelsUsecase","text":"The use case is responsible for creating an instance of the 'RouteModel' model and Pydantic models. Source code in fastapi_gateway_auto_generate/domain/usecases/BuildRouteModelsUsecase.py 23 24 def __init__ ( self ) -> None : self . __open_api_parser : OpenApiParser = OpenApiParser ()","title":"BuildRouteModelsUsecase"},{"location":"CodeReference/domain/usecases/BuildRouteModelsUsecase/#fastapi_gateway_auto_generate.domain.usecases.BuildRouteModelsUsecase.BuildRouteModelsUsecase.__generate_models","text":"Pydantic model generator from openapi.json.\" Returns: Name Type Description _uuid str Unique identifier as the file name. classes list [ str ] List of class names. Source code in fastapi_gateway_auto_generate/domain/usecases/BuildRouteModelsUsecase.py 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 def __generate_models ( self ): \"\"\"Pydantic model generator from openapi.json.\" Returns: _uuid (str): Unique identifier as the file name. classes (list[str]): List of class names. \"\"\" shortuuid . set_alphabet ( \"ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\" ) project_root = os . path . dirname ( sys . modules [ 'fastapi_gateway_auto_generate' ] . __file__ ) letters = string . ascii_lowercase _uuid = f \"model_ { shortuuid . ShortUUID () . random ( length = 10 ) } \" output = Path ( f ' { project_root } /tmp/models/ { _uuid } .py' ) dir = Path ( f ' { project_root } /tmp/models/' ) generate ( input_ = self . __open_api_parser . get_raw_resoponse_in_string (), input_file_type = InputFileType . OpenAPI , input_filename = \"example.json\" , output = output ) model : str = output . read_text () classes : list [ str ] = re . findall ( r \"class\\s([A-Za-z0-91]*)\" , model ) return _uuid , classes","title":"__generate_models()"},{"location":"CodeReference/domain/usecases/BuildRouteModelsUsecase/#fastapi_gateway_auto_generate.domain.usecases.BuildRouteModelsUsecase.BuildRouteModelsUsecase.execute","text":"The class responsible for adding automatic service connections to the FastAPI object. Parameters: Name Type Description Default config Config The Config object with its configuration. required Returns: Name Type Description services_result list [ dict [ str , Any ]] The product of a and b . Source code in fastapi_gateway_auto_generate/domain/usecases/BuildRouteModelsUsecase.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 def execute ( self , config : Config ) -> list [ dict [ str , Any ]]: \"\"\"The class responsible for adding automatic service connections to the FastAPI object. Args: config (Config): The Config object with its configuration. Returns: services_result (list[dict[str, Any]]): The product of `a` and `b`. \"\"\" routes_model : list [ RouteModel ] = [] services_result : list [ dict [ str , Any ]] = [] get_all_info_services_model : GetAllInfoServices = GetAllInfoServices ( page = 1 ) services , err = GetAllServices ( db_url = config . db_url ) . get_all_services ( get_all_info_services_model = get_all_info_services_model ) if not err is None : return services_result count_page : int = services [ \"metadata\" ][ \"count_page\" ] StatusService ( db_url = config . db_url ) . delete_all_rows () UrlService ( db_url = config . db_url ) . delete_all_rows () if err is None : for _ in range ( 0 , count_page ): services , err = GetAllServices ( db_url = config . db_url ) . get_all_services ( get_all_info_services_model = get_all_info_services_model ) for service in services [ \"services\" ]: routes_model = [] service_result = {} url = f \" { service [ 'domain' ] } : { service [ 'port' ] } \" logger . debug ( url ) status_code = self . __open_api_parser . parse_from_service ( url = url ) logger . debug ( status_code ) StatusService ( db_url = config . db_url ) . set_status_service ( id_service = service [ \"id\" ], status_code = status_code ) if status_code != 200 : continue for path in self . __open_api_parser . get_paths (): if self . __open_api_parser . auto_generate_enabled ( path = path ): UrlService ( db_url = config . db_url ) . set_url_service ( id_service = service [ \"id\" ], url = path ) path_method : str = self . __open_api_parser . get_path_method ( path ) dependencies = [] logger . debug ( self . __open_api_parser . get_paths ()) if not ( config . jwt is None ) and self . __open_api_parser . check_enable_auth_in_api_gateway ( path = path ): dependencies . append ( Depends ( config . jwt ( service [ \"name\" ], path , path_method ))) route_model : RouteModel = RouteModel ( request_method = getattr ( config . fast_api_app , path_method ), gateway_path = f \"/ { service [ 'name' ] }{ path } \" , service_url = url , service_path = path , tags = [ service [ \"name\" ]], dependencies = dependencies ) route_model . query_params , route_model . query_required , route_model . query_is_cookie = self . __open_api_parser . get_queries_param ( path = path , method = path_method ) route_model . form_params = self . __open_api_parser . get_body_multipart_form_data ( path = path , method = path_method ) route_model . body_params = self . __open_api_parser . get_body_application_json ( path = path , method = path_method ) routes_model . append ( route_model ) else : continue service_result [ \"models\" ], service_result [ \"model_output\" ] = self . __generate_models ( ) service_result [ \"route_models\" ] = routes_model service_result [ \"service_url\" ] = f \" { service [ 'domain' ] } : { service [ 'port' ] } \" services_result . append ( service_result ) get_all_info_services_model . page += 1 pprint ( services_result ) return services_result","title":"execute()"},{"location":"CodeReference/domain/usecases/BuildRoutesUsecase/","text":"fastapi_gateway_auto_generate . domain . usecases . BuildRoutesUsecase . BuildRoutesUsecase () \u00b6 Source code in fastapi_gateway_auto_generate/domain/usecases/BuildRoutesUsecase.py 19 20 21 def __init__ ( self ) -> None : self . models_routes_vars = {} self . models_routes = {}","title":"BuildRoutesUsecase"},{"location":"CodeReference/domain/usecases/BuildRoutesUsecase/#fastapi_gateway_auto_generate.domain.usecases.BuildRoutesUsecase.BuildRoutesUsecase","text":"Source code in fastapi_gateway_auto_generate/domain/usecases/BuildRoutesUsecase.py 19 20 21 def __init__ ( self ) -> None : self . models_routes_vars = {} self . models_routes = {}","title":"BuildRoutesUsecase"},{"location":"CodeReference/domain/usecases/DeleteTmpModelsFilesUsecase/","text":"fastapi_gateway_auto_generate . domain . usecases . DeleteTmpModelsFilesUsecase . DeleteTmpModelsFilesUsecase () \u00b6 Source code in fastapi_gateway_auto_generate/domain/usecases/DeleteTmpModelsFilesUsecase.py 8 9 def __init__ ( self ) -> None : pass","title":"DeleteTmpModelsFilesUsecase"},{"location":"CodeReference/domain/usecases/DeleteTmpModelsFilesUsecase/#fastapi_gateway_auto_generate.domain.usecases.DeleteTmpModelsFilesUsecase.DeleteTmpModelsFilesUsecase","text":"Source code in fastapi_gateway_auto_generate/domain/usecases/DeleteTmpModelsFilesUsecase.py 8 9 def __init__ ( self ) -> None : pass","title":"DeleteTmpModelsFilesUsecase"},{"location":"CodeReference/domain/usecases/InitDatabaseUsecase/","text":"fastapi_gateway_auto_generate . domain . usecases . InitDatabaseUsecase . InitDatabaseUsecase () \u00b6 Source code in fastapi_gateway_auto_generate/domain/usecases/InitDatabaseUsecase.py 9 10 def __init__ ( self ) -> None : pass","title":"InitDatabaseUsecase"},{"location":"CodeReference/domain/usecases/InitDatabaseUsecase/#fastapi_gateway_auto_generate.domain.usecases.InitDatabaseUsecase.InitDatabaseUsecase","text":"Source code in fastapi_gateway_auto_generate/domain/usecases/InitDatabaseUsecase.py 9 10 def __init__ ( self ) -> None : pass","title":"InitDatabaseUsecase"},{"location":"CodeReference/domain/usecases/RefreshServicesUsecase/","text":"fastapi_gateway_auto_generate . domain . usecases . RefreshServicesUsecase . RefreshServicesUsecase () \u00b6 Source code in fastapi_gateway_auto_generate/domain/usecases/RefreshServicesUsecase.py 11 12 def __init__ ( self ): pass","title":"RefreshServicesUsecase"},{"location":"CodeReference/domain/usecases/RefreshServicesUsecase/#fastapi_gateway_auto_generate.domain.usecases.RefreshServicesUsecase.RefreshServicesUsecase","text":"Source code in fastapi_gateway_auto_generate/domain/usecases/RefreshServicesUsecase.py 11 12 def __init__ ( self ): pass","title":"RefreshServicesUsecase"},{"location":"CodeReference/domain/usecases/UpdateOpenApiSchemaUsecase/","text":"fastapi_gateway_auto_generate . domain . usecases . UpdateOpenApiSchemaUsecase . UpdateOpenApiSchemaUsecase () \u00b6 Source code in fastapi_gateway_auto_generate/domain/usecases/UpdateOpenApiSchemaUsecase.py 5 6 def __init__ ( self ) -> None : pass","title":"UpdateOpenApiSchemaUsecase"},{"location":"CodeReference/domain/usecases/UpdateOpenApiSchemaUsecase/#fastapi_gateway_auto_generate.domain.usecases.UpdateOpenApiSchemaUsecase.UpdateOpenApiSchemaUsecase","text":"Source code in fastapi_gateway_auto_generate/domain/usecases/UpdateOpenApiSchemaUsecase.py 5 6 def __init__ ( self ) -> None : pass","title":"UpdateOpenApiSchemaUsecase"},{"location":"CodeReference/exceptions/ConfigException/","text":"","title":"ConfigException"},{"location":"CodeReference/exceptions/FastapiGatewayAutoGenerageException/","text":"","title":"FastapiGatewayAutoGenerageException"},{"location":"CodeReference/management/Management/","text":"fastapi_gateway_auto_generate.management.Management \u00b6","title":"Management"},{"location":"CodeReference/management/Management/#fastapi_gateway_auto_generate.management.Management","text":"","title":"Management"},{"location":"CodeReference/management/models/AddService/","text":"","title":"AddService"},{"location":"CodeReference/management/models/DeleteService/","text":"","title":"DeleteService"},{"location":"CodeReference/management/models/GetAllInfoServices/","text":"","title":"GetAllInfoServices"},{"location":"CodeReference/management/routes/AddServiceRoute/","text":"fastapi_gateway_auto_generate.management.routes.AddServiceRoute \u00b6","title":"AddServiceRoute"},{"location":"CodeReference/management/routes/AddServiceRoute/#fastapi_gateway_auto_generate.management.routes.AddServiceRoute","text":"","title":"AddServiceRoute"},{"location":"CodeReference/management/routes/DeleteServiceRoute/","text":"fastapi_gateway_auto_generate.management.routes.DeleteServiceRoute \u00b6","title":"DeleteServiceRoute"},{"location":"CodeReference/management/routes/DeleteServiceRoute/#fastapi_gateway_auto_generate.management.routes.DeleteServiceRoute","text":"","title":"DeleteServiceRoute"},{"location":"CodeReference/management/routes/GetAllInfoServicesRoute/","text":"fastapi_gateway_auto_generate.management.routes.GetAllInfoServicesRoute \u00b6","title":"GetAllInfoServicesRoute"},{"location":"CodeReference/management/routes/GetAllInfoServicesRoute/#fastapi_gateway_auto_generate.management.routes.GetAllInfoServicesRoute","text":"","title":"GetAllInfoServicesRoute"},{"location":"CodeReference/management/routes/RefreshServicesRoute/","text":"fastapi_gateway_auto_generate.management.routes.RefreshServicesRoute \u00b6","title":"RefreshServicesRoute"},{"location":"CodeReference/management/routes/RefreshServicesRoute/#fastapi_gateway_auto_generate.management.routes.RefreshServicesRoute","text":"","title":"RefreshServicesRoute"},{"location":"Usage/getting-started/","text":"Getting started \u00b6 Additional metadata for tags \u00b6 In order for the url from the microservice to be transferred to the API Gateway, you need to add additional metadata for your tags. In our case, this is x-auto-generate-in-api-gateway . For example, we have such a microservice. Example The example was taken on the website FastAPI (Create metadata for tags) app.py from fastapi import FastAPI import uvicorn tags_metadata = [ { \"name\" : \"users\" , \"description\" : \"Operations with users. The **login** logic is also here.\" , }, { \"name\" : \"items\" , \"description\" : \"Manage items. So _fancy_ they have their own docs.\" , \"externalDocs\" : { \"description\" : \"Items external docs\" , \"url\" : \"https://fastapi.tiangolo.com/\" , }, }, ] app = FastAPI ( openapi_tags = tags_metadata ) @app . get ( \"/users/\" , tags = [ \"users\" ]) async def get_users (): return [{ \"name\" : \"Harry\" }, { \"name\" : \"Ron\" }] @app . get ( \"/items/\" , tags = [ \"items\" ]) async def get_items (): return [{ \"name\" : \"wand\" }, { \"name\" : \"flying broom\" }] if __name__ == '__main__' : uvicorn . run ( app , port = 5000 , log_level = \"info\" ) Adds an additional tag x-auto-generate-in-api-gateway in order for it to be transferred to the API Gateway. app.py from fastapi import FastAPI import uvicorn tags_metadata = [ { \"name\" : \"users\" , \"description\" : \"Operations with users. The **login** logic is also here.\" , \"x-auto-generate-in-api-gateway\" : True , # (1)! }, { \"name\" : \"items\" , \"description\" : \"Manage items. So _fancy_ they have their own docs.\" , \"externalDocs\" : { \"description\" : \"Items external docs\" , \"url\" : \"https://fastapi.tiangolo.com/\" }, \"x-auto-generate-in-api-gateway\" : True , # (2)! }, ] app = FastAPI ( openapi_tags = tags_metadata ) @app . get ( \"/users/\" , tags = [ \"users\" ]) async def get_users (): return [{ \"name\" : \"Harry\" }, { \"name\" : \"Ron\" }] @app . get ( \"/items/\" , tags = [ \"items\" ]) async def get_items (): return [{ \"name\" : \"wand\" }, { \"name\" : \"flying broom\" }] if __name__ == '__main__' : uvicorn . run ( app , port = 5000 , log_level = \"info\" ) Tag for transferred to the API Gateway. Tag for transferred to the API Gateway. Now who has the tag users and items will be automatically transferred to the API Gateway. Question If you suddenly change the tag for some reason, then you can do this when creating an object in the API Gateway Initializing an object in the API Gateway \u00b6 Create Config object \u00b6 When creating an object, first we need to configure our generator. There is a \"Config\" class for this. from fastapi_gateway_auto_generate import Config from fastapi import FastAPI app = FastAPI () config = Config ( fast_api_app = app , ) fast_api_app \u2192 The object of your app. service_management_api \u2192 Enable service management using the API interface. Enabled by default. Warning This parameter temporarily does not work and will always be enabled. db_path \u2192 The path to the database. By default, creates a database in the root directory of the project. Documentation in development Example creating a simple generator \u00b6 from fastapi_gateway_auto_generate import Generator , Config from fastapi import FastAPI import uvicorn app = FastAPI () config = Config ( fast_api_app = app , ) Generator ( config = config ) if __name__ == \"__main__\" : uvicorn . run ( app = app , port = 5000 , log_level = \"info\" )","title":"Getting started"},{"location":"Usage/getting-started/#getting-started","text":"","title":"Getting started"},{"location":"Usage/getting-started/#additional-metadata-for-tags","text":"In order for the url from the microservice to be transferred to the API Gateway, you need to add additional metadata for your tags. In our case, this is x-auto-generate-in-api-gateway . For example, we have such a microservice. Example The example was taken on the website FastAPI (Create metadata for tags) app.py from fastapi import FastAPI import uvicorn tags_metadata = [ { \"name\" : \"users\" , \"description\" : \"Operations with users. The **login** logic is also here.\" , }, { \"name\" : \"items\" , \"description\" : \"Manage items. So _fancy_ they have their own docs.\" , \"externalDocs\" : { \"description\" : \"Items external docs\" , \"url\" : \"https://fastapi.tiangolo.com/\" , }, }, ] app = FastAPI ( openapi_tags = tags_metadata ) @app . get ( \"/users/\" , tags = [ \"users\" ]) async def get_users (): return [{ \"name\" : \"Harry\" }, { \"name\" : \"Ron\" }] @app . get ( \"/items/\" , tags = [ \"items\" ]) async def get_items (): return [{ \"name\" : \"wand\" }, { \"name\" : \"flying broom\" }] if __name__ == '__main__' : uvicorn . run ( app , port = 5000 , log_level = \"info\" ) Adds an additional tag x-auto-generate-in-api-gateway in order for it to be transferred to the API Gateway. app.py from fastapi import FastAPI import uvicorn tags_metadata = [ { \"name\" : \"users\" , \"description\" : \"Operations with users. The **login** logic is also here.\" , \"x-auto-generate-in-api-gateway\" : True , # (1)! }, { \"name\" : \"items\" , \"description\" : \"Manage items. So _fancy_ they have their own docs.\" , \"externalDocs\" : { \"description\" : \"Items external docs\" , \"url\" : \"https://fastapi.tiangolo.com/\" }, \"x-auto-generate-in-api-gateway\" : True , # (2)! }, ] app = FastAPI ( openapi_tags = tags_metadata ) @app . get ( \"/users/\" , tags = [ \"users\" ]) async def get_users (): return [{ \"name\" : \"Harry\" }, { \"name\" : \"Ron\" }] @app . get ( \"/items/\" , tags = [ \"items\" ]) async def get_items (): return [{ \"name\" : \"wand\" }, { \"name\" : \"flying broom\" }] if __name__ == '__main__' : uvicorn . run ( app , port = 5000 , log_level = \"info\" ) Tag for transferred to the API Gateway. Tag for transferred to the API Gateway. Now who has the tag users and items will be automatically transferred to the API Gateway. Question If you suddenly change the tag for some reason, then you can do this when creating an object in the API Gateway","title":"Additional metadata for tags"},{"location":"Usage/getting-started/#initializing-an-object-in-the-api-gateway","text":"","title":"Initializing an object in the API Gateway"},{"location":"Usage/getting-started/#create-config-object","text":"When creating an object, first we need to configure our generator. There is a \"Config\" class for this. from fastapi_gateway_auto_generate import Config from fastapi import FastAPI app = FastAPI () config = Config ( fast_api_app = app , ) fast_api_app \u2192 The object of your app. service_management_api \u2192 Enable service management using the API interface. Enabled by default. Warning This parameter temporarily does not work and will always be enabled. db_path \u2192 The path to the database. By default, creates a database in the root directory of the project. Documentation in development","title":"Create Config object"},{"location":"Usage/getting-started/#example-creating-a-simple-generator","text":"from fastapi_gateway_auto_generate import Generator , Config from fastapi import FastAPI import uvicorn app = FastAPI () config = Config ( fast_api_app = app , ) Generator ( config = config ) if __name__ == \"__main__\" : uvicorn . run ( app = app , port = 5000 , log_level = \"info\" )","title":"Example creating a simple generator"},{"location":"Usage/service-management/","text":"Service management \u00b6 The library has built-in urls for managing services. Service management is enabled by default. If desired, you can disable the built-in service management system if you do not need it. There is a service_management parameter for this. URLS \u00b6 Add service \u00b6 Method Path POST /service Description \u00b6 Adds a service to the database. Parameters \u00b6 ip - IP address of the service. port - The service port. Info By default 80 name_service - The name of the service. Note It is needed to avoid duplication of paths if several services have the same path. Example: https://127.0.0.1:5000/{name_service}/{path_service} Example ( Python requests ) \u00b6 # Install the Python Requests library: # `pip install requests` import requests def send_request (): # Request # POST http://127.0.0.1:5000/service try : response = requests . post ( url = \"http://127.0.0.1:5000/service\" , params = { \"ip\" : \"127.0.0.1\" , \"port\" : \"8080\" , \"name_service\" : \"Hello\" , }, ) print ( 'Response HTTP Status Code: {status_code} ' . format ( status_code = response . status_code )) print ( 'Response HTTP Response Body: {content} ' . format ( content = response . content )) except requests . exceptions . RequestException : print ( 'HTTP Request failed' ) Delete service \u00b6 Refresh services \u00b6 Method Path PATCH /services Description \u00b6 Updates the URL and checks the functionality of the services without first restarting the program. Example ( Python requests ) \u00b6 # Install the Python Requests library: # `pip install requests` import requests def send_request (): # Request # PATCH http://127.0.0.1:5000/services try : response = requests . patch ( url = \"http://127.0.0.1:5000/services\" , ) print ( 'Response HTTP Status Code: {status_code} ' . format ( status_code = response . status_code )) print ( 'Response HTTP Response Body: {content} ' . format ( content = response . content )) except requests . exceptions . RequestException : print ( 'HTTP Request failed' ) Get info all services \u00b6","title":"API"},{"location":"Usage/service-management/#service-management","text":"The library has built-in urls for managing services. Service management is enabled by default. If desired, you can disable the built-in service management system if you do not need it. There is a service_management parameter for this.","title":"Service management"},{"location":"Usage/service-management/#urls","text":"","title":"URLS"},{"location":"Usage/service-management/#add-service","text":"Method Path POST /service","title":"Add service"},{"location":"Usage/service-management/#description","text":"Adds a service to the database.","title":"Description"},{"location":"Usage/service-management/#parameters","text":"ip - IP address of the service. port - The service port. Info By default 80 name_service - The name of the service. Note It is needed to avoid duplication of paths if several services have the same path. Example: https://127.0.0.1:5000/{name_service}/{path_service}","title":"Parameters"},{"location":"Usage/service-management/#example-python-requests","text":"# Install the Python Requests library: # `pip install requests` import requests def send_request (): # Request # POST http://127.0.0.1:5000/service try : response = requests . post ( url = \"http://127.0.0.1:5000/service\" , params = { \"ip\" : \"127.0.0.1\" , \"port\" : \"8080\" , \"name_service\" : \"Hello\" , }, ) print ( 'Response HTTP Status Code: {status_code} ' . format ( status_code = response . status_code )) print ( 'Response HTTP Response Body: {content} ' . format ( content = response . content )) except requests . exceptions . RequestException : print ( 'HTTP Request failed' )","title":"Example (Python requests)"},{"location":"Usage/service-management/#delete-service","text":"","title":"Delete service"},{"location":"Usage/service-management/#refresh-services","text":"Method Path PATCH /services","title":"Refresh services"},{"location":"Usage/service-management/#description_1","text":"Updates the URL and checks the functionality of the services without first restarting the program.","title":"Description"},{"location":"Usage/service-management/#example-python-requests_1","text":"# Install the Python Requests library: # `pip install requests` import requests def send_request (): # Request # PATCH http://127.0.0.1:5000/services try : response = requests . patch ( url = \"http://127.0.0.1:5000/services\" , ) print ( 'Response HTTP Status Code: {status_code} ' . format ( status_code = response . status_code )) print ( 'Response HTTP Response Body: {content} ' . format ( content = response . content )) except requests . exceptions . RequestException : print ( 'HTTP Request failed' )","title":"Example (Python requests)"},{"location":"Usage/service-management/#get-info-all-services","text":"","title":"Get info all services"},{"location":"Usage/using-as-module/","text":"Using as module \u00b6 Info This functionality has not yet been implemented","title":"Using as module"},{"location":"Usage/using-as-module/#using-as-module","text":"Info This functionality has not yet been implemented","title":"Using as module"}]}