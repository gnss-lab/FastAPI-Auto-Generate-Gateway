{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview \u00b6 This library allows you to automatically generate API gateway requests based on your implemented microservices. Installing \u00b6 To install fastapi-gateway-auto-generate : pip install fastapi-gateway-auto-generate","title":"Overview"},{"location":"#overview","text":"This library allows you to automatically generate API gateway requests based on your implemented microservices.","title":"Overview"},{"location":"#installing","text":"To install fastapi-gateway-auto-generate : pip install fastapi-gateway-auto-generate","title":"Installing"},{"location":"how-to-use/","text":"How to use \u00b6 1. Additional metadata for tags \u00b6 In order for the url from the microservice to be transferred to the API Gateway, you need to add additional metadata for your tags. In our case, this is x-auto-generate-in-api-gateway . For example, we have such a microservice. Example The example was taken on the website FastAPI (Create metadata for tags) app.py from fastapi import FastAPI import uvicorn tags_metadata = [ { \"name\" : \"users\" , \"description\" : \"Operations with users. The **login** logic is also here.\" , }, { \"name\" : \"items\" , \"description\" : \"Manage items. So _fancy_ they have their own docs.\" , \"externalDocs\" : { \"description\" : \"Items external docs\" , \"url\" : \"https://fastapi.tiangolo.com/\" , }, }, ] app = FastAPI ( openapi_tags = tags_metadata ) @app . get ( \"/users/\" , tags = [ \"users\" ]) async def get_users (): return [{ \"name\" : \"Harry\" }, { \"name\" : \"Ron\" }] @app . get ( \"/items/\" , tags = [ \"items\" ]) async def get_items (): return [{ \"name\" : \"wand\" }, { \"name\" : \"flying broom\" }] if __name__ == '__main__' : uvicorn . run ( app , port = 5000 , log_level = \"info\" ) Adds an additional tag x-auto-generate-in-api-gateway in order for it to be transferred to the API Gateway. app.py from fastapi import FastAPI import uvicorn tags_metadata = [ { \"name\" : \"users\" , \"description\" : \"Operations with users. The **login** logic is also here.\" , \"x-auto-generate-in-api-gateway\" : True , # (1)! }, { \"name\" : \"items\" , \"description\" : \"Manage items. So _fancy_ they have their own docs.\" , \"externalDocs\" : { \"description\" : \"Items external docs\" , \"url\" : \"https://fastapi.tiangolo.com/\" }, \"x-auto-generate-in-api-gateway\" : True , # (2)! }, ] app = FastAPI ( openapi_tags = tags_metadata ) @app . get ( \"/users/\" , tags = [ \"users\" ]) async def get_users (): return [{ \"name\" : \"Harry\" }, { \"name\" : \"Ron\" }] @app . get ( \"/items/\" , tags = [ \"items\" ]) async def get_items (): return [{ \"name\" : \"wand\" }, { \"name\" : \"flying broom\" }] if __name__ == '__main__' : uvicorn . run ( app , port = 5000 , log_level = \"info\" ) Tag for transferred to the API Gateway. Tag for transferred to the API Gateway. Now who has the tag users and items will be automatically transferred to the API Gateway. Question If you suddenly change the tag for some reason, then you can do this when creating an object in the API Gateway 2. Initializing an object in the API Gateway \u00b6 Documentation in development","title":"How to use"},{"location":"how-to-use/#how-to-use","text":"","title":"How to use"},{"location":"how-to-use/#1-additional-metadata-for-tags","text":"In order for the url from the microservice to be transferred to the API Gateway, you need to add additional metadata for your tags. In our case, this is x-auto-generate-in-api-gateway . For example, we have such a microservice. Example The example was taken on the website FastAPI (Create metadata for tags) app.py from fastapi import FastAPI import uvicorn tags_metadata = [ { \"name\" : \"users\" , \"description\" : \"Operations with users. The **login** logic is also here.\" , }, { \"name\" : \"items\" , \"description\" : \"Manage items. So _fancy_ they have their own docs.\" , \"externalDocs\" : { \"description\" : \"Items external docs\" , \"url\" : \"https://fastapi.tiangolo.com/\" , }, }, ] app = FastAPI ( openapi_tags = tags_metadata ) @app . get ( \"/users/\" , tags = [ \"users\" ]) async def get_users (): return [{ \"name\" : \"Harry\" }, { \"name\" : \"Ron\" }] @app . get ( \"/items/\" , tags = [ \"items\" ]) async def get_items (): return [{ \"name\" : \"wand\" }, { \"name\" : \"flying broom\" }] if __name__ == '__main__' : uvicorn . run ( app , port = 5000 , log_level = \"info\" ) Adds an additional tag x-auto-generate-in-api-gateway in order for it to be transferred to the API Gateway. app.py from fastapi import FastAPI import uvicorn tags_metadata = [ { \"name\" : \"users\" , \"description\" : \"Operations with users. The **login** logic is also here.\" , \"x-auto-generate-in-api-gateway\" : True , # (1)! }, { \"name\" : \"items\" , \"description\" : \"Manage items. So _fancy_ they have their own docs.\" , \"externalDocs\" : { \"description\" : \"Items external docs\" , \"url\" : \"https://fastapi.tiangolo.com/\" }, \"x-auto-generate-in-api-gateway\" : True , # (2)! }, ] app = FastAPI ( openapi_tags = tags_metadata ) @app . get ( \"/users/\" , tags = [ \"users\" ]) async def get_users (): return [{ \"name\" : \"Harry\" }, { \"name\" : \"Ron\" }] @app . get ( \"/items/\" , tags = [ \"items\" ]) async def get_items (): return [{ \"name\" : \"wand\" }, { \"name\" : \"flying broom\" }] if __name__ == '__main__' : uvicorn . run ( app , port = 5000 , log_level = \"info\" ) Tag for transferred to the API Gateway. Tag for transferred to the API Gateway. Now who has the tag users and items will be automatically transferred to the API Gateway. Question If you suddenly change the tag for some reason, then you can do this when creating an object in the API Gateway","title":"1. Additional metadata for tags"},{"location":"how-to-use/#2-initializing-an-object-in-the-api-gateway","text":"Documentation in development","title":"2. Initializing an object in the API Gateway"},{"location":"overview/","text":"Overview \u00b6 This library allows you to automatically generate API gateway requests based on your implemented microservices. Installing \u00b6 To install fastapi-gateway-auto-generate : pip install fastapi-gateway-auto-generate","title":"Overview"},{"location":"overview/#overview","text":"This library allows you to automatically generate API gateway requests based on your implemented microservices.","title":"Overview"},{"location":"overview/#installing","text":"To install fastapi-gateway-auto-generate : pip install fastapi-gateway-auto-generate","title":"Installing"},{"location":"service-management/","text":"Service management \u00b6 The library has built-in urls for managing services. Service management is enabled by default. If desired, you can disable the built-in service management system if you do not need it. There is a service_management parameter for this. URLS \u00b6 Add service \u00b6 Method Path POST /service Description \u00b6 Adds a service to the database. Parameters \u00b6 ip - IP address of the service. port - The service port. Info By default 80 name_service - The name of the service. Note It is needed to avoid duplication of paths if several services have the same path. Example: https://127.0.0.1:5000/{name_service}/{path_service} Example ( Python requests ) \u00b6 # Install the Python Requests library: # `pip install requests` import requests def send_request (): # Request # POST http://127.0.0.1:5000/service try : response = requests . post ( url = \"http://127.0.0.1:5000/service\" , params = { \"ip\" : \"127.0.0.1\" , \"port\" : \"8080\" , \"name_service\" : \"Hello\" , }, ) print ( 'Response HTTP Status Code: {status_code} ' . format ( status_code = response . status_code )) print ( 'Response HTTP Response Body: {content} ' . format ( content = response . content )) except requests . exceptions . RequestException : print ( 'HTTP Request failed' ) Delete service \u00b6 Refresh services \u00b6 Method Path PATCH /services Description \u00b6 Updates the URL and checks the functionality of the services without first restarting the program. Example ( Python requests ) \u00b6 # Install the Python Requests library: # `pip install requests` import requests def send_request (): # Request # PATCH http://127.0.0.1:5000/services try : response = requests . patch ( url = \"http://127.0.0.1:5000/services\" , ) print ( 'Response HTTP Status Code: {status_code} ' . format ( status_code = response . status_code )) print ( 'Response HTTP Response Body: {content} ' . format ( content = response . content )) except requests . exceptions . RequestException : print ( 'HTTP Request failed' ) Get info all services \u00b6","title":"Service managemnt"},{"location":"service-management/#service-management","text":"The library has built-in urls for managing services. Service management is enabled by default. If desired, you can disable the built-in service management system if you do not need it. There is a service_management parameter for this.","title":"Service management"},{"location":"service-management/#urls","text":"","title":"URLS"},{"location":"service-management/#add-service","text":"Method Path POST /service","title":"Add service"},{"location":"service-management/#description","text":"Adds a service to the database.","title":"Description"},{"location":"service-management/#parameters","text":"ip - IP address of the service. port - The service port. Info By default 80 name_service - The name of the service. Note It is needed to avoid duplication of paths if several services have the same path. Example: https://127.0.0.1:5000/{name_service}/{path_service}","title":"Parameters"},{"location":"service-management/#example-python-requests","text":"# Install the Python Requests library: # `pip install requests` import requests def send_request (): # Request # POST http://127.0.0.1:5000/service try : response = requests . post ( url = \"http://127.0.0.1:5000/service\" , params = { \"ip\" : \"127.0.0.1\" , \"port\" : \"8080\" , \"name_service\" : \"Hello\" , }, ) print ( 'Response HTTP Status Code: {status_code} ' . format ( status_code = response . status_code )) print ( 'Response HTTP Response Body: {content} ' . format ( content = response . content )) except requests . exceptions . RequestException : print ( 'HTTP Request failed' )","title":"Example (Python requests)"},{"location":"service-management/#delete-service","text":"","title":"Delete service"},{"location":"service-management/#refresh-services","text":"Method Path PATCH /services","title":"Refresh services"},{"location":"service-management/#description_1","text":"Updates the URL and checks the functionality of the services without first restarting the program.","title":"Description"},{"location":"service-management/#example-python-requests_1","text":"# Install the Python Requests library: # `pip install requests` import requests def send_request (): # Request # PATCH http://127.0.0.1:5000/services try : response = requests . patch ( url = \"http://127.0.0.1:5000/services\" , ) print ( 'Response HTTP Status Code: {status_code} ' . format ( status_code = response . status_code )) print ( 'Response HTTP Response Body: {content} ' . format ( content = response . content )) except requests . exceptions . RequestException : print ( 'HTTP Request failed' )","title":"Example (Python requests)"},{"location":"service-management/#get-info-all-services","text":"","title":"Get info all services"}]}